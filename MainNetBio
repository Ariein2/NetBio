#%% THRESHOLD
import networkx as nx
import igraph 
import numpy as np 
import ndlib.models.ModelConfig as mc
import ndlib.models.epidemics as ep
from ndlib.viz.bokeh.MultiPlot import MultiPlot
from bokeh.io import output_notebook, show
from ndlib.viz.bokeh.DiffusionTrend import DiffusionTrend
from ndlib.viz.bokeh.DiffusionPrevalence import DiffusionPrevalence
import matplotlib as plot
import hvplot.networkx as hvnx

# '''
# # Random graph:
# av_degree= 10
# prob = 2*av_degree/1000
# G = nx.erdos_renyi_graph(1000, prob)
# av = G.number_of_edges()/G.number_of_nodes()
# print(av)
# nx.draw(G)
# nx.draw(G, pos=nx.spring_layout(G))  # use spring layout
# '''

# LOAD GRAPH: 
data=nx.read_graphml('budapest_large.graphml')
shell= hvnx.draw(data)
shell
data.remove_nodes_from(list(nx.isolates(data)))
shell2= hvnx.draw(data)
shell 
shell2
# # Model selection
#multi = MultiPlot()
# model = ep.ThresholdModel(G)

# # Model Configuration
# config = mc.Configuration()
# config.add_model_parameter('fraction_infected', 0.1)

# # Setting node parameters
# threshold = 0.15
# for i in G.nodes():
#     config.add_node_configuration("threshold", i, threshold)

# model.set_initial_status(config)

# # Simulation execution
# iterations = model.iteration_bunch(10)
# trends = model.build_trends(iterations)


# viz = DiffusionTrend(model, trends)
# p = viz.plot(width=400, height=400)
# multi.add_plot(p)

# viz2 = DiffusionPrevalence(model, trends)
# p2 = viz2.plot(width=400, height=400)
# multi.add_plot(p2)
# show(multi.plot())

# %%
